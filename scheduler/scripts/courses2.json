[
    {
        "courseId": "15050",
        "treeType": "OR",
        "nodeId": 0,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "Students who are interested in studying abroad should first contact the Office of International Education. More information on Study Abroad is available on OIE's Study Abroad page and at the CS Undergraduate Office.",
        "title": "Study Abroad"
    },
    {
        "courseId": "15075",
        "treeType": "OR",
        "nodeId": 1,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "Students who are interested in a Co-Op experience with an external employer typically do so in their Junior year. A Co-Op is distinguished from a summer internship in that it encompasses a summer and a contiguous semester, either Spring-Summer or Summer-Fall. A list of companies who are interested in hiring Co-Op students is available from the SCS Career Consultant at the Career Center. More information on the Computer Science Co-Op program is available at the CS Undergraduate Office.",
        "title": "Computer Science Co-Op"
    },
    {
        "courseId": "15090",
        "treeType": "OR",
        "nodeId": 2,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "This course is for international students who are interested in working for Curricular Practical Training (CPT). Such students interested in CPT must first be authorized by the Office of International Education before being able to enroll in the Practicum course. More information on CPT is available on OIE's Foreign Student Employment page and at the CS Undergraduate Office.",
        "title": "Computer Science Practicum"
    },
    {
        "courseId": "15110",
        "treeType": "OR",
        "nodeId": 3,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            24
        ],
        "prereqLinks": [],
        "postreqLinks": [
            25
        ],
        "description": "A course in fundamental computing principles for students with minimal or no computing background. Programming constructs: sequencing, selection, iteration, and recursion. Data organization: arrays and lists. Use of abstraction in computing: data representation, computer organization, computer networks, functional decomposition, and application programming interfaces. Use of computational principles in problem-solving: divide and conquer, randomness, and concurrency. Classification of computational problems based on complexity, non-computable functions, and using heuristics to find reasonable solutions to complex problems. Social, ethical and legal issues associated with the development of new computational artifacts will also be discussed.",
        "title": "Principles of Computing"
    },
    {
        "courseId": "15112",
        "treeType": "OR",
        "nodeId": 4,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            5,
            6,
            9,
            19,
            21,
            24,
            42,
            53,
            99
        ],
        "prereqLinks": [],
        "postreqLinks": [
            0,
            1,
            7,
            19,
            20,
            26,
            48,
            61,
            93
        ],
        "description": "A technical introduction to the fundamentals of programming with an emphasis on producing clear, robust, and reasonably efficient code using top-down design, informal analysis, and effective testing and debugging. Starting from first principles, we will cover a large subset of the Python programming language, including its standard libraries and programming paradigms. We will also target numerous deployment scenarios, including standalone programs, shell scripts, and web-based applications. This course assumes no prior programming experience. Even so, it is a fast-paced and rigorous preparation for 15-122. Students seeking a more gentle introduction to computer science should consider first taking 15-110. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Fundamentals of Programming and Computer Science"
    },
    {
        "courseId": "15121",
        "treeType": "OR",
        "nodeId": 5,
        "isStarter": true,
        "prereqIndices": [
            4
        ],
        "postreqIndices": [
            15
        ],
        "prereqLinks": [
            0
        ],
        "postreqLinks": [
            11
        ],
        "description": "A continuation of the process of program design and analysis for students with some prior programming experience (functions, loops, and arrays, not necessarily in Java). The course reinforces object-oriented programming techniques in Java and covers data aggregates, data structures (e.g., linked lists, stacks, queues, trees, and graphs), and an introduction to the analysis of algorithms that operate on those data structures. Pre-req: 15-112 or placement",
        "title": "Introduction to Data Structures"
    },
    {
        "courseId": "15122",
        "treeType": "OR",
        "nodeId": 6,
        "isStarter": true,
        "prereqIndices": [
            4,
            7,
            8
        ],
        "postreqIndices": [
            12,
            13,
            15,
            24,
            25,
            34,
            38,
            40,
            47,
            53,
            72
        ],
        "prereqLinks": [
            1,
            2,
            3
        ],
        "postreqLinks": [
            8,
            10,
            12,
            27,
            30,
            40,
            43,
            45,
            50,
            62,
            106
        ],
        "description": "For students with a basic understanding of programming (variables, expressions, loops, arrays, functions). Teaches imperative programming and methods for ensuring the correctness of programs. Students will learn the process and concepts needed to go from high-level descriptions of algorithms to correct imperative implementations, with specific application to basic data structures and algorithms. Much of the course will be conducted in a subset of C amenable to verification, with a transition to full C near the end. This course prepares students for 15-213 and 15-210. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Principles of Imperative Computation"
    },
    {
        "courseId": "15151",
        "treeType": "OR",
        "nodeId": 7,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            6,
            10,
            16,
            22
        ],
        "prereqLinks": [],
        "postreqLinks": [
            2,
            5,
            15,
            22
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "21127",
        "treeType": "OR",
        "nodeId": 8,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            6,
            10,
            16,
            22,
            138
        ],
        "prereqLinks": [],
        "postreqLinks": [
            3,
            4,
            14,
            21,
            111
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15150",
        "treeType": "OR",
        "nodeId": 9,
        "isStarter": true,
        "prereqIndices": [
            10,
            4
        ],
        "postreqIndices": [
            12,
            24
        ],
        "prereqLinks": [
            6,
            7
        ],
        "postreqLinks": [
            9,
            28
        ],
        "description": "An introduction to programming based on a &quot;functional&quot; model of computation. The functional model is a natural generalization of algebra in which programs are formulas that describe the output of a computation in terms of its inputs---that is, as a function. But instead of being confined to real- or complex-valued functions, the functional model extends the algebraic view to a very rich class of data types, including not only aggregates built up from other types, but also functions themselves as values. This course is an introduction to programming that is focused on the central concepts of function and type. One major theme is the interplay between inductive types, which are built up incrementally; recursive functions, which compute over inductive types by decomposition; and proof by structural induction, which is used to prove the correctness and time complexity of a recursive function. Another major theme is the role of types in structuring large programs into separate modules, and the integration of imperative programming through the introduction of data types whose values may be altered during computation. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Principles of Functional Programming"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 10,
        "isStarter": true,
        "prereqIndices": [
            8,
            7
        ],
        "postreqIndices": [
            9
        ],
        "prereqLinks": [
            4,
            5
        ],
        "postreqLinks": [
            6
        ]
    },
    {
        "courseId": "15199",
        "treeType": "OR",
        "nodeId": 11,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "This course is ONLY offered at Carnegie Mellon in Qatar. This course has the purpose of introducing first-year Computer Science students to elements of formal logic as well as to the historical context in which this discipline developed. As all subsequent courses in the CS curriculum rely on students having mastered basic logical notions and skills, it will test and enhance your preparation, thereby putting you in a better position to succeed in the program. It will also help you understand and appreciate how CS came about since Computer Science grew out of logic. The specific knowledge and skills you will learn in is course include: an enhanced ability to research topics, give presentations and write technical prose, some elementary logic, some historical depth into Computer Science, mathematics and logic itself. This course is open to Computer Science freshmen only.",
        "title": "Special Topics: Discovering Logic"
    },
    {
        "courseId": "15210",
        "treeType": "OR",
        "nodeId": 12,
        "isStarter": true,
        "prereqIndices": [
            6,
            9
        ],
        "postreqIndices": [
            30,
            32,
            48,
            64
        ],
        "prereqLinks": [
            8,
            9
        ],
        "postreqLinks": [
            33,
            37,
            54,
            75
        ],
        "description": "Teaches students about how to design, analyze, and program algorithms and data structures. The course emphasizes parallel algorithms and analysis, and how sequential algorithms can be considered a special case. The course goes into more theoretical content on algorithm analysis than 15-122 and 15-150 while still including a significant programming component and covering a variety of practical applications such as problems in data analysis, graphics, text processing, and the computational sciences. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Parallel and Sequential Data Structures and Algorithms"
    },
    {
        "courseId": "15213",
        "treeType": "OR",
        "nodeId": 13,
        "isStarter": true,
        "prereqIndices": [
            6
        ],
        "postreqIndices": [
            33,
            44,
            49,
            51,
            61,
            62,
            69,
            75,
            160,
            166
        ],
        "prereqLinks": [
            10
        ],
        "postreqLinks": [
            39,
            49,
            56,
            60,
            71,
            72,
            81,
            88,
            135,
            145
        ],
        "description": "This course provides a programmer's view of how computer systems execute programs, store information, and communicate. It enables students to become more effective programmers, especially in dealing with issues of performance, portability and robustness. It also serves as a foundation for courses on compilers, networks, operating systems, and computer architecture, where a deeper understanding of systems-level issues is required. Topics covered include: machine-level code and its generation by optimizing compilers, performance evaluation and optimization, computer arithmetic, memory organization and management, networking technology and protocols, and supporting concurrent computation. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Introduction to Computer Systems"
    },
    {
        "courseId": "15214",
        "treeType": "OR",
        "nodeId": 14,
        "isStarter": true,
        "prereqIndices": [
            15,
            16
        ],
        "postreqIndices": [
            60,
            91,
            101,
            233,
            235
        ],
        "prereqLinks": [
            13,
            16
        ],
        "postreqLinks": [
            70,
            90,
            95,
            259,
            263
        ],
        "description": "Software engineers today are less likely to design data structures and algorithms from scratch and more likely to build systems from library and framework components. In this course, students engage with concepts related to the construction of software systems at scale, building on their understanding of the basic building blocks of data structures, algorithms, program structures, and computer structures. The course covers technical topics in four areas: (1) concepts of design for complex systems, (2) object oriented programming, (3) static and dynamic analysis for programs, and (4) concurrent and distributed software. Student assignments involve engagement with complex software such as distributed massively multi-player game systems and frameworks for graphical user interaction.",
        "title": "Principles of Software Construction: Objects, Design, and Concurrency"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 15,
        "isStarter": true,
        "prereqIndices": [
            5,
            6
        ],
        "postreqIndices": [
            14
        ],
        "prereqLinks": [
            11,
            12
        ],
        "postreqLinks": [
            13
        ]
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 16,
        "isStarter": true,
        "prereqIndices": [
            8,
            7
        ],
        "postreqIndices": [
            14
        ],
        "prereqLinks": [
            14,
            15
        ],
        "postreqLinks": [
            16
        ]
    },
    {
        "courseId": "15221",
        "treeType": "OR",
        "nodeId": 17,
        "isStarter": true,
        "prereqIndices": [
            18
        ],
        "postreqIndices": [],
        "prereqLinks": [
            17
        ],
        "postreqLinks": [],
        "description": "The course is designed for sophomore computer science majors to improve their abilities in practical, professional communications (both written and oral). It aims to help students compose clear, concise technical writings and oral presentations for multi-level audiences. Assignments include technical definitions, descriptions, instructions, process explanations, abstracts, memos, and research reports. Assignments may incorporate recent computer science research at Carnegie Mellon, projects in related technical courses, and professional case studies. Sophomores will likely find the course more useful if they have either had an internship or faculty-supervised research, including SURG projects prior to enrollment.",
        "title": "Technical Communication for Computer Scientists"
    },
    {
        "courseId": "76101",
        "treeType": "OR",
        "nodeId": 18,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            17,
            23,
            27,
            28
        ],
        "prereqLinks": [],
        "postreqLinks": [
            17,
            24,
            31,
            32
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15239",
        "treeType": "OR",
        "nodeId": 19,
        "isStarter": true,
        "prereqIndices": [
            20,
            4
        ],
        "postreqIndices": [],
        "prereqLinks": [
            18,
            19
        ],
        "postreqLinks": [],
        "description": "CMU has extensive global service learning opportunities promoting the advancement of social causes through technology. In this real-world project-based course, we will work closely with some of these projects to produce free and open-source software products of real and immediate value. We expect many but not all projects to include mobile web apps, though target platforms will be selected to best suit the projects we are servicing. Topics include elements of project management, design, and software development practices, tools, and techniques as required. Students will work in teams across all phases of product development, including requirements gathering, user experience design, software design, implementation, test, deployment, support, and maintenance. We aim to provide opportunities for students to interact with end-users who will directly benefit from these projects. Additional topics may include support for large-scale open-source software projects which are compatible with the goals of this course. In keeping with the goals of the course, all content created by students and faculty in this course will be released under free and open-source licenses. [Note: This course may serve as a CS Elective towards the CS major or CS minor.] Prerequisites: Permission of the instructor and either (B or higher in 15-237) OR (B or higher in 15-112 and extensive web programming experience).",
        "title": "Special Topic: Software Development for Social Good"
    },
    {
        "courseId": "15237",
        "treeType": "OR",
        "nodeId": 20,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            19
        ],
        "prereqLinks": [],
        "postreqLinks": [
            18
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15251",
        "treeType": "OR",
        "nodeId": 21,
        "isStarter": true,
        "prereqIndices": [
            4,
            22
        ],
        "postreqIndices": [
            30,
            37,
            46,
            64,
            65
        ],
        "prereqLinks": [
            20,
            23
        ],
        "postreqLinks": [
            34,
            42,
            53,
            74,
            78
        ],
        "description": "This course is about how to use theoretical ideas to formulate and solve problems in computer science. It integrates mathematical material with general problem solving techniques and computer science applications. Examples are drawn from Algorithms, Complexity Theory, Game Theory, Probability Theory, Graph Theory, Automata Theory, Algebra, Cryptography, and Combinatorics. Assignments involve both mathematical proofs and programming. NOTE: students must achieve a C or better in order to use this course to satisfy the pre-requisite for any subsequent Computer Science course.",
        "title": "Great Theoretical Ideas in Computer Science"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 22,
        "isStarter": true,
        "prereqIndices": [
            8,
            7
        ],
        "postreqIndices": [
            21
        ],
        "prereqLinks": [
            21,
            22
        ],
        "postreqLinks": [
            23
        ]
    },
    {
        "courseId": "15292",
        "treeType": "OR",
        "nodeId": 23,
        "isStarter": true,
        "prereqIndices": [
            18,
            24
        ],
        "postreqIndices": [],
        "prereqLinks": [
            24,
            29
        ],
        "postreqLinks": [],
        "description": "This course traces the history of computational devices, pioneers and principles from the early ages through the present. Topics include early computational devices, mechanical computation in the 19th century, events that led to electronic computing advances in the 20th century, the advent of personal computing and the Internet, and the social, legal and ethical impact of modern computational artifacts. This course also includes a history of programming languages, operating systems, processors and computing platforms. Students should have an introductory exposure to programming prior to taking this course.",
        "title": "Special Topic: History of Computing"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 24,
        "isStarter": true,
        "prereqIndices": [
            3,
            4,
            6,
            9
        ],
        "postreqIndices": [
            23
        ],
        "prereqLinks": [
            25,
            26,
            27,
            28
        ],
        "postreqLinks": [
            29
        ]
    },
    {
        "courseId": "15295",
        "treeType": "OR",
        "nodeId": 25,
        "isStarter": true,
        "prereqIndices": [
            6
        ],
        "postreqIndices": [],
        "prereqLinks": [
            30
        ],
        "postreqLinks": [],
        "description": "Each year, Carnegie Mellon fields two teams for participation in the ACM-ICPC Regional Programming Contest. During many recent years, one of those teams has earned the right to represent Carnegie Mellon at the ACM-ICPC World Finals. This course is a vehicle for those who consistently and rigorously train in preparation for the contests to earn course credit for their effort and achievement. Preparation involves the study of algorithms, the practice of programming and debugging, the development of test sets, and the growth of team, communication, and problem solving skills. Neither the course grade nor the number of units earned are dependent on ranking in any contest. Students are not required to earn course credit to participate in practices or to compete in ACM-ICPC events. Consistent, disciplined participation in team practices and associated individual preparation earns three (3) units of credit. Six (6) units of credit are possible for those who routinely complete significant homework and/or teamwork assignments outside of normal group meetings. Students interested in the course should attend during the first week of classes to discuss enrollment details.",
        "title": "Competition Programming and Problem Solving"
    },
    {
        "courseId": "15296",
        "treeType": "OR",
        "nodeId": 26,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "In this research and action based course we will explore computing from a cultural perspective. We will reflect on some issues often taken for granted e.g. are our attitudes to computing generalizable or culturally specific? How are computing and its workforce perceived and represented in US culture and in cultures from around the world? In particular we will be examining how images of the field might affect public attitudes, access to resources and understanding of computer science. Representations of the field take on particular significance in light of recent US government projections: between now and 2018, among all occupations in all fields of science and engineering, computer science occupations will account for nearly 60% of all job growth [Computing Community Consortium, 2010]. This course is aimed primarily at students who are interested in exploring some of the broad issues of computer science and its cultural context. Students will gain experience in teamwork, teaching and presenting. We will use academic papers, web sites, group discussion/debate and popular media. Findings from our investigations will inspire the action component in which student teams develop and implement a public/outreach presentation aimed at re-presenting the exciting field of computer science with broad appeal in mind.",
        "title": "Special Topic: Images of Computing"
    },
    {
        "courseId": "15302",
        "treeType": "OR",
        "nodeId": 27,
        "isStarter": true,
        "prereqIndices": [
            18
        ],
        "postreqIndices": [],
        "prereqLinks": [
            31
        ],
        "postreqLinks": [],
        "description": "The ultimate goal of this course is to teach students practical skills necessary to conduct effective field research on the topic of innovating for underserved communities. The course begins with an introduction to how computing technology can have a positive impact on the lives of people in developing communities and people with disabilities. Next, students will learn about the components of field research including needs assessment, literature review, iterative solution development, evaluation, and dissemination. Students will also explore the challenges of field research in this area and learn effective strategies for overcoming these challenges. Overall, students will engage in assignments and in-class exercises that help them gain experience and prepare for future field research endeavors. As part of the final assignment, students will participate in a solution design process for a specific challenge faced by one of the underserved community partners of the TechBridgeWorld research group at Carnegie Mellon University. This year, the course will focus on innovating virtual navigation tools for visually impaired adults. Promising outcomes of this course will be further developed by the TechBridgeWorld research group and tested with visually impaired users with the permission of students involved with producing these outcomes.",
        "title": "Special Topic: Innovating for Underserved Communities: Field Research Basics"
    },
    {
        "courseId": "15303",
        "treeType": "OR",
        "nodeId": 28,
        "isStarter": true,
        "prereqIndices": [
            18
        ],
        "postreqIndices": [],
        "prereqLinks": [
            32
        ],
        "postreqLinks": [],
        "description": "The ultimate goal of this course is to familiarize students with ongoing work in the area of technology innovations for underserved communites. This seminar course will review several key publications and presentations on this topic and teach students the necessary skills to analyze and critique this work in useful ways. Class sessions will be dedicated to discussing reading/viewing assignments and each class discussion will be led by students. Assignments will involve analyzing, writing, and presenting critiques of specific projects.",
        "title": "Special Topic: Seminar on Innovating for Underserved Communities"
    },
    {
        "courseId": "15312",
        "treeType": "OR",
        "nodeId": 29,
        "isStarter": true,
        "prereqIndices": [
            30,
            31
        ],
        "postreqIndices": [
            50
        ],
        "prereqLinks": [
            35,
            36
        ],
        "postreqLinks": [
            58
        ],
        "description": "This course discusses in depth many of the concepts underlying the design, definition, implementation, and use of modern programming languages. Formal approaches to defining the syntax and semantics are used to describe the fundamental concepts underlying programming languages. A variety of programming paradigms are covered such as imperative, functional, logic, and concurrent programming. In addition to the formal studies, experience with programming in the languages is used to illustrate how different design goals can lead to radically different languages and models of computation.",
        "title": "Foundations of Programming Languages"
    },
    {
        "courseId": "",
        "treeType": "AND",
        "nodeId": 30,
        "isStarter": true,
        "prereqIndices": [
            12,
            21
        ],
        "postreqIndices": [
            29
        ],
        "prereqLinks": [
            33,
            34
        ],
        "postreqLinks": [
            35
        ]
    },
    {
        "courseId": "15212",
        "treeType": "OR",
        "nodeId": 31,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            29,
            32
        ],
        "prereqLinks": [],
        "postreqLinks": [
            36,
            38
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15317",
        "treeType": "OR",
        "nodeId": 32,
        "isStarter": true,
        "prereqIndices": [
            12,
            31
        ],
        "postreqIndices": [
            50
        ],
        "prereqLinks": [
            37,
            38
        ],
        "postreqLinks": [
            59
        ],
        "description": "This multidisciplinary junior-level course is designed to provide a thorough introduction to modern constructive logic, its roots in philosophy, its numerous applications in computer science, and its mathematical properties. Some of the topics to be covered are intuitionistic logic, inductive definitions, functional programming, type theory, realizability, connections between classical and constructive logic, decidable classes. This course counts as a Fundamentals course in the Computer Science major.",
        "title": "Constructive Logic"
    },
    {
        "courseId": "15319",
        "treeType": "OR",
        "nodeId": 33,
        "isStarter": true,
        "prereqIndices": [
            13
        ],
        "postreqIndices": [],
        "prereqLinks": [
            39
        ],
        "postreqLinks": [],
        "description": "This on-line course gives students an overview of the field of Cloud Computing, its enabling technologies, main building blocks, and hands-on experience through 4 projects utilizing a public cloud (Amazon Web Services). Cloud computing services are being adopted widely across a variety of organizations and in many domains. Simply, cloud computing is the delivery of computing as a service over a network, whereby distributed resources are rented, rather than owned, by an end user as a utility. The course will introduce this domain and cover the topics of data centers, resource management, cloud storage, and programming models. As an introduction, we will discuss the motivating factors, benefits, challenges, and service models. Modern data centers enable many of the economic and technological benefits of the cloud paradigm; hence, we will describe several concepts behind data center design and management. Next, we will focus on existing approaches for resource management including resource abstraction, sharing and virtualization technologies. Students will learn about different cloud storage concepts including data distribution, durability, consistency and redundancy. HDFS, PVFS, HBase, Cassandra and S3 will be presented as examples of underlying distributed file systems. Students will understand the details of the MapReduce programming model and gain a broad overview of alternative programming models such as Pregel, and GraphLab. Students will work with a public cloud service (such as Amazon Web Services), use it to rent and provision compute resources and then program and deploy applications that run on these resources. Students will work with cloud storage systems and learn to develop applications in the MapReduce programming paradigm.",
        "title": "Cloud Computing"
    },
    {
        "courseId": "15323",
        "treeType": "OR",
        "nodeId": 34,
        "isStarter": true,
        "prereqIndices": [
            6
        ],
        "postreqIndices": [],
        "prereqLinks": [
            40
        ],
        "postreqLinks": [],
        "description": "This course presents concepts and techniques for representing and manipulating discrete music information, both in real time and off line. Representations of music as explicitly timed event sequences will be introduced, and students will learn how to build efficient run-time systems for event scheduling, tempo control, and interactive processing. The MIDI protocol is used to capture real-time performance information and to generate sound. The course will also cover non-real-time processing of music data, including Markov models, style recognition, computer accompaniment, query-by-humming, and algorithmic composition. This course is independent of, and complementary to 15-322, Introduction to Computer Music, which focuses on sound synthesis and signal processing.",
        "title": "Computer Music Systems and Information Processing"
    },
    {
        "courseId": "15348",
        "treeType": "OR",
        "nodeId": 35,
        "isStarter": true,
        "prereqIndices": [
            36
        ],
        "postreqIndices": [],
        "prereqLinks": [
            41
        ],
        "postreqLinks": [],
        "description": "This course is ONLY offered at Carnegie Mellon in Qatar. This course covers the broad range of foundational skills that apply across all embedded computer system application areas, from thermostats to self-driving vehicles. The emphasis is at the layer where hardware meets software. Topics include microcontroller hardware, assembly language, embedded C programming, analog I/O, timers, code optimization, interrupts, and concurrency. Real world engineering practices, constraints, and example applications are integrated throughout the course. Weekly hands-on hardware and software experiences with an industry-strength automotive embedded controller are coordinated with the lecture content to reinforce core skills.",
        "title": "Embedded Systems"
    },
    {
        "courseId": "15123",
        "treeType": "OR",
        "nodeId": 36,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            35
        ],
        "prereqLinks": [],
        "postreqLinks": [
            41
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15355",
        "treeType": "OR",
        "nodeId": 37,
        "isStarter": true,
        "prereqIndices": [
            21
        ],
        "postreqIndices": [],
        "prereqLinks": [
            42
        ],
        "postreqLinks": [],
        "description": "The goal of this course is to investigate the relationship between algebra and computation. The course is designed to expose students to algorithms used for symbolic computation, as well as to the concepts from modern algebra which are applied to the development of these algorithms. This course provides a hands-on introduction to many of the most important ideas used in symbolic mathematical computation, which involves solving system of polynomial equations (via Groebner bases), analytic integration, and solving linear difference equations. Throughout the course the computer algebra system Mathematica will be used for computation.",
        "title": "Modern Computer Algebra"
    },
    {
        "courseId": "15381",
        "treeType": "OR",
        "nodeId": 38,
        "isStarter": true,
        "prereqIndices": [
            6,
            39
        ],
        "postreqIndices": [],
        "prereqLinks": [
            43,
            44
        ],
        "postreqLinks": [],
        "description": "This course is about the theory and practice of Artificial Intelligence. We will study modern techniques for computers to represent task-relevant information and make intelligent (i.e. satisficing or optimal) decisions towards the achievement of goals. The search and problem solving methods are applicable throughout a large range of industrial, civil, medical, financial, robotic, and information systems. We will investigate questions about AI systems such as: how to represent knowledge, how to effectively generate appropriate sequences of actions and how to search among alternatives to find optimal or near-optimal solutions. We will also explore how to deal with uncertainty in the world, how to learn from experience, and how to learn decision rules from data. We expect that by the end of the course students will have a thorough understanding of the algorithmic foundations of AI, how probability and AI are closely interrelated, and how automated agents learn. We also expect students to acquire a strong appreciation of the big-picture aspects of developing fully autonomous intelligent agents. Other lectures will introduce additional aspects of AI, including natural language processing, web-based search engines, industrial applications, autonomous robotics, and economic/game-theoretic decision making.",
        "title": "Artificial Intelligence: Representation and Problem Solving"
    },
    {
        "courseId": "15211",
        "treeType": "OR",
        "nodeId": 39,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            38,
            47,
            49
        ],
        "prereqLinks": [],
        "postreqLinks": [
            44,
            51,
            55
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15385",
        "treeType": "OR",
        "nodeId": 40,
        "isStarter": true,
        "prereqIndices": [
            6,
            41
        ],
        "postreqIndices": [],
        "prereqLinks": [
            45,
            46
        ],
        "postreqLinks": [],
        "description": "An introduction to the science and engineering of computer vision, i.e. the analysis of the patterns in visual images with the view to understanding the objects and processes in the world that generate them. Major topics include image formation and sensing, fourier analysis, edge and contour detection, inference of depth, shape and motion, classification, recognition, tracking, and active vision. The emphasis is on the learning of fundamental mathematical concepts and techniques and applying them to solve real vision problems. The discussion will also include comparison with human and animal vision from psychological and biological perspectives. Students will learn to think mathematically and develop skills in translating ideas and mathematical thoughts into programs to solve real vision problems.",
        "title": "Introduction to Computer Vision"
    },
    {
        "courseId": "21241",
        "treeType": "OR",
        "nodeId": 41,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            40,
            64,
            69
        ],
        "prereqLinks": [],
        "postreqLinks": [
            46,
            76,
            82
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15386",
        "treeType": "OR",
        "nodeId": 42,
        "isStarter": true,
        "prereqIndices": [
            43,
            4
        ],
        "postreqIndices": [],
        "prereqLinks": [
            47,
            48
        ],
        "postreqLinks": [],
        "description": "Computational neuroscience is an interdisciplinary science that seeks to understand how the brain computes to achieve natural intelligence. It seeks to understand the computational principles and mechanisms of intelligent behaviors and mental abilities -- such as perception, language, motor control, and learning -- by building artificial systems and computational models with the same capabilities. This course explores how neurons encode and process information, adapt and learn, communicate, cooperate, compete and compute at the individual level as well as at the levels of networks and systems. It will introduce basic concepts in computational modeling, information theory, signal processing, system analysis, statistical and probabilistic inference. Concrete examples will be drawn from the visual system and the motor systems, and studied from computational, psychological and biological perspectives. Students will learn to perform computational experiments using Matlab and quantitative studies of neurons and neuronal networks.",
        "title": "Neural Computation"
    },
    {
        "courseId": "21122",
        "treeType": "OR",
        "nodeId": 43,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            42,
            99,
            73,
            151
        ],
        "prereqLinks": [],
        "postreqLinks": [
            47,
            94,
            103,
            126
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15410",
        "treeType": "OR",
        "nodeId": 44,
        "isStarter": true,
        "prereqIndices": [
            13
        ],
        "postreqIndices": [
            63,
            84,
            185,
            227,
            242,
            249
        ],
        "prereqLinks": [
            49
        ],
        "postreqLinks": [
            73,
            89,
            187,
            252,
            271,
            282
        ],
        "description": "Operating System Design and Implementation is a rigorous hands-on introduction to the principles and practice of operating systems. The core experience is writing a small Unix-inspired OS kernel, in C with some x86 assembly language, which runs on a PC hardware simulator (and on actual PC hardware if you wish). Work is done in two-person teams, and &quot;team programming&quot; skills (source control, modularity, documentation) are emphasized. The size and scope of the programming assignments typically result in students significantly developing their design, implementation, and debugging abilities. Core concepts include the process model, virtual memory, threads, synchronization, and deadlock; the course also surveys higher-level OS topics including file systems, interprocess communication, networking, and security. Students, especially graduate students, who have not satisfied the prerequisite at Carnegie Mellon are strongly cautioned - to enter the class you must be able to write a storage allocator in C, use a debugger, understand 2's-complement arithmetic, and translate between C and x86 assembly language. The instructor may require you to complete a skills assessment exercise before the first week of the semester in order to remain registered in the class. Auditing: this course is usually full, and we generally receive many more requests to audit than we can accept. If you wish to audit, please have your advisor contact us before the semester begins to discuss your educational goals.",
        "title": "Operating System Design and Implementation"
    },
    {
        "courseId": "15413",
        "treeType": "OR",
        "nodeId": 45,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [],
        "prereqLinks": [],
        "postreqLinks": [],
        "description": "In this course, students will carry out a semester-long software development project for a real client. Students will have the choice of a client at CMU, or a client who is part of an open-source development project. Students who choose the open-source option will have the opportunity to collaborate with students at other universities such as Stanford or MIT, and will participate in a kickoff meeting sponsored by Facebook, February 7-9 in Menlo Park, CA. Students in the open-source option should sign up for the course and notify the instructors of their interest by November 22, 2013. A few lectures at the beginning of the course will introduce the process, tools, and documents to be used in the course, all of which will be specified by the instructors. Throughout the project, groups will be mentored through weekly team meetings with faculty. Students will make regular presentations, and will be evaluated on the code delivered, software engineering process, client satisfaction, and their contribution to the team. Students will leave the course with a firsthand understanding of the software engineering realities that drive SE practices. They will have concrete experience with these practices, and will have engaged in active reflection on this experience. They will have teamwork, process, and product skills to support immediate competency in a software engineering organization, along with a deeper understanding that prepares them to evaluate the new processes and techniques they will encounter in the workplace.",
        "title": "Software Engineering Practicum"
    },
    {
        "courseId": "15414",
        "treeType": "OR",
        "nodeId": 46,
        "isStarter": true,
        "prereqIndices": [
            47,
            21
        ],
        "postreqIndices": [],
        "prereqLinks": [
            52,
            53
        ],
        "postreqLinks": [],
        "description": "Many CS and ECE students will be developing software and hardware that must be ultra reliable at some point in their careers. Logical errors in such designs can be costly, even life threatening. There have already been a number of well publicized errors like the Intel Pentium floating point error and the Arian 5 crash. In this course we will study tools for finding and preventing logical errors. Three types of tools will be studied: automated theorem proving, state exploration techniques like model checking and tools based on static program analysis. Although students will learn the theoretical basis for such tools, the emphasis will be on actually using them on real examples. This course can be used to satisfy the Logic &amp; Languages requirement for the Computer Science major.",
        "title": "Bug Catching: Automated Program Verification and Testing"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 47,
        "isStarter": true,
        "prereqIndices": [
            6,
            39
        ],
        "postreqIndices": [
            46
        ],
        "prereqLinks": [
            50,
            51
        ],
        "postreqLinks": [
            52
        ]
    },
    {
        "courseId": "15415",
        "treeType": "OR",
        "nodeId": 48,
        "isStarter": true,
        "prereqIndices": [
            12,
            49
        ],
        "postreqIndices": [],
        "prereqLinks": [
            54,
            57
        ],
        "postreqLinks": [],
        "description": "This course covers the fundamental topics for Database Management Systems: Database System Architectural Principles (ACID properties; data abstraction; external, conceptual, and internal schemata; data independence; data definition and data manipulation languages), Data models (entity-relationship and relational data models; data structures, integrity constraints, and operations for each data model; relational query languages: SQL, algebra, calculus), Theory of database design (functional dependencies; normal forms; dependency preservation; information loss), Query Optimization (equivalence of expressions, algebraic manipulation; optimization of selections and joins), Storage Strategies (indices, B-trees, hashing), Query Processing (execution of sort, join, and aggregation operators), and Transaction Processing (recovery and concurrency control).",
        "title": "Database Applications"
    },
    {
        "courseId": "",
        "treeType": "AND",
        "nodeId": 49,
        "isStarter": true,
        "prereqIndices": [
            39,
            13
        ],
        "postreqIndices": [
            48
        ],
        "prereqLinks": [
            55,
            56
        ],
        "postreqLinks": [
            57
        ]
    },
    {
        "courseId": "15417",
        "treeType": "OR",
        "nodeId": 50,
        "isStarter": true,
        "prereqIndices": [
            29,
            32
        ],
        "postreqIndices": [],
        "prereqLinks": [
            58,
            59
        ],
        "postreqLinks": [],
        "description": "The course covers the implementation of compilers for higher-order, typed languages such as ML and Haskell, and gives an introduction to type-preserving compilation. Topics covered include type inference, elaboration, CPS conversion, closure conversion, garbage collection, phase splitting, and typed assembly language.",
        "title": "HOT Compilation"
    },
    {
        "courseId": "15418",
        "treeType": "OR",
        "nodeId": 51,
        "isStarter": true,
        "prereqIndices": [
            13
        ],
        "postreqIndices": [],
        "prereqLinks": [
            60
        ],
        "postreqLinks": [],
        "description": "The fundamental principles and engineering tradeoffs involved in designing modern parallel computers, as well as the programming techniques to effectively utilize these machines. Topics include naming shared data, synchronizing threads, and the latency and bandwidth associated with communication. Case studies on shared-memory, message-passing, data-parallel and dataflow machines will be used to illustrate these techniques and tradeoffs. Programming assignments will be performed on one or more commercial multiprocessors, and there will be a significant course project.",
        "title": "Parallel Computer Architecture and Programming"
    },
    {
        "courseId": "15423",
        "treeType": "OR",
        "nodeId": 52,
        "isStarter": true,
        "prereqIndices": [
            53,
            54
        ],
        "postreqIndices": [],
        "prereqLinks": [
            63,
            69
        ],
        "postreqLinks": [],
        "description": "Digital signals comprise a large fraction of the data analyzed by computer scientists. Sound, e.g. speech and music, images, radar and many other signal types that were conventionally considered to be the domain of the Electrical engineer are now also in the domain of computer scientists, who must analyze them, make inferences, and develop machine learning techinques to analyze, classify and reconstruct such data. In this course we will cover the basics of Digital Signal Processing. We will concentrate on the basic mathematical formulations, rather than in-depth implementation details. We will cover the breadth of topics, beginning with the basics of signals and their representations, the theory of sampling, important transform representations, key processing techniques, and spectral estimation.",
        "title": "Special Topic: Digital Signal Processing for Computer Science"
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 53,
        "isStarter": true,
        "prereqIndices": [
            4,
            6
        ],
        "postreqIndices": [
            52
        ],
        "prereqLinks": [
            61,
            62
        ],
        "postreqLinks": [
            63
        ]
    },
    {
        "courseId": "",
        "treeType": "OR",
        "nodeId": 54,
        "isStarter": true,
        "prereqIndices": [
            55,
            56,
            57,
            58,
            59
        ],
        "postreqIndices": [
            52
        ],
        "prereqLinks": [
            64,
            65,
            66,
            67,
            68
        ],
        "postreqLinks": [
            69
        ]
    },
    {
        "courseId": "21325",
        "treeType": "OR",
        "nodeId": 55,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            54
        ],
        "prereqLinks": [],
        "postreqLinks": [
            64
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "36625",
        "treeType": "OR",
        "nodeId": 56,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            54
        ],
        "prereqLinks": [],
        "postreqLinks": [
            65
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "36217",
        "treeType": "OR",
        "nodeId": 57,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            54,
            144,
            230
        ],
        "prereqLinks": [],
        "postreqLinks": [
            66,
            116,
            254
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "36225",
        "treeType": "OR",
        "nodeId": 58,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            54
        ],
        "prereqLinks": [],
        "postreqLinks": [
            67
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15359",
        "treeType": "OR",
        "nodeId": 59,
        "isStarter": true,
        "prereqIndices": [],
        "postreqIndices": [
            54
        ],
        "prereqLinks": [],
        "postreqLinks": [
            68
        ],
        "description": "",
        "title": ""
    },
    {
        "courseId": "15437",
        "treeType": "OR",
        "nodeId": 60,
        "isStarter": true,
        "prereqIndices": [
            14
        ],
        "postreqIndices": [],
        "prereqLinks": [
            70
        ],
        "postreqLinks": [],
        "description": "This course will introduce concepts in programming web application servers. We will study the fundamental architectural elements of programming web sites that produce content dynamically. The primary technologies introduced will by the Spring Framework for Java and the Django framework for Python, but we will cover related topics as necessary so that students can build significant applications. Such topics include: HTTP, HTML, CSS, Javascript, XML, Design Patterns, Relational and Non-relational Databases, Object-Relation Mapping tools, Security, Web Services, Cloud Deployment, Internationalization, and Scalability and Performance Issues. Students must be comfortable programming in Java and/or Python to register for this course. Students must provide their own computer hardware for this course. Please see the Related URL above for more information.",
        "title": "Web Application Development"
    },
    {
        "courseId": "15440",
        "treeType": "OR",
        "nodeId": 61,
        "isStarter": true,
        "prereqIndices": [
            13
        ],
        "postreqIndices": [],
        "prereqLinks": [
            71
        ],
        "postreqLinks": [],
        "description": "The goals of this course are twofold: First, for students to gain an understanding of the principles and techniques behind the design of distributed systems, such as locking, concurrency, scheduling, and communication across the network. Second, for students to gain practical experience designing, implementing, and debugging real distributed systems. The major themes this course will teach include scarcity, scheduling, concurrency and concurrent programming, naming, abstraction and modularity, imperfect communication and other types of failure, protection from accidental and malicious harm, optimism, and the use of instrumentation and monitoring and debugging tools in problem solving. As the creation and management of software systems is a fundamental goal of any undergraduate systems course, students will design, implement, and debug large programming projects. As a consequence, competency in both the C and Java programming languages is required.",
        "title": "Distributed Systems"
    }
]